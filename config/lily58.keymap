/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#undef ZMK_MOUSE_DEFAULT_MOVE_VAL

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 7500  // 600

#undef ZMK_MOUSE_DEFAULT_SCRL_VAL

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 70    // 10

#include "mouse.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    combos {
        compatible = "zmk,combos";

        game_layer {
            bindings = <&to 5>;
            key-positions = <50 57 12>;
            timeout-ms = <30000>;
            layers = <0 3>;
        };

        normal_layer {
            bindings = <&to 0>;
            key-positions = <50 57 12>;
            timeout-ms = <30000>;
            layers = <5>;
        };

        move5to6 {
            bindings = <&to 6>;
            key-positions = <12 50>;
            timeout-ms = <30000>;
            layers = <5>;
        };

        move6to5 {
            bindings = <&to 5>;
            key-positions = <12 50>;
            timeout-ms = <30000>;
            layers = <6>;
        };

        rEp {
            bindings = <&ext_power EP_TOG>;
            key-positions = <43 11>;
            layers = <0 2 3 4 5 6 7 8>;
        };

        lEg {
            bindings = <&ext_power EP_TOG>;
            key-positions = <42 0>;
            layers = <0 3 2 4 5 6 7 8>;
        };
    };

    macros {
        kurung: kurung {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N9) &kp LS(N0)>;
            label = "KURUNG";
        };

        kurung2: kurung2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_BRACKET) &kp LS(RIGHT_BRACKET)>;
            label = "KURUNG2";
        };

        kurung3: kurung3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET>;
            label = "KURUNG3";
        };

        replace: replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK &kp LC(V)>;
            label = "REPLACE";
        };

        block_and_copy: block_and_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &mkp LCLK &kp LC(C)>;
            label = "BLOCK_AND_COPY";
        };

        sticky_shift_layer: sticky_shift_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&none>;

            label = "STICKY_SHIFT_LAYER";
        };

        spam_f: spam_f {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 150>,
                <&kp F>,
                <&macro_wait_time 50>,
                <&kp F>;

            label = "SPAM_F";
        };
    };

    behaviors {
        mo_stickyKey: mo_stickyKey {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_STICKYKEY";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        faster_mouse: faster_mouse {
            compatible = "zmk,behavior-mouse-move";
            label = "FASTER_MOUSE";
            #binding-cells = <1>;
            time-to-max-speed-ms = <100>;
            acceleration-exponent = <2>;
            delay-ms = <1>;
        };

        faster_scroll: faster_scroll {
            compatible = "zmk,behavior-mouse-scroll";
            label = "FASTER_SCROLL";
            #binding-cells = <1>;
            time-to-max-speed-ms = <100>;
            acceleration-exponent = <2>;
            delay-ms = <1>;
        };

        short_layer_tap: short_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SHORT_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "hold-preferred";
        };

        long_hold_tap: long_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LONG_HOLD_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
            flavor = "tap-preferred";
        };

        space_shift: space_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "SPACE_SHIFT";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&sk LEFT_SHIFT>;

            tapping-term-ms = <250>;
        };

        mo_tap: mo_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TAP";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };

        to_mo: to_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "TO_MO";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  ENTER |  | SPACE | RAISE| BSPC  | GUI   |

            bindings = <
&mo_tap 7 BACKSPACE  &kp N1  &kp N2  &kp N3            &kp N4     &kp N5                                           &kp N6                   &kp N7                    &kp N8     &kp N9   &kp N0        &kp BACKSPACE
&kp TAB              &kp Q   &kp W   &kp E             &kp R      &kp T                                            &kp Y                    &kp U                     &kp I      &kp O    &kp P         &kp MINUS
&kp LCTRL            &kp A   &kp S   &kp D             &kp F      &kp G                                            &kp H                    &kp J                     &kp K      &kp L    &kp SEMI      &lt 11 ENTER
&mkp LCLK            &kp Z   &kp X   &kp C             &kp V      &kp B      &lt 4 N         &lt 4 B               &kp N                    &kp M                     &kp COMMA  &kp DOT  &kp QUESTION  &kp ENTER
                                     &lt 8 LEFT_SHIFT  &kp SPACE  &kp SPACE  &to_mo 11 11    &mt LEFT_ALT LA(TAB)  &mt LEFT_SHIFT LEFT_WIN  &short_layer_tap 3 SPACE  &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans           &trans    &trans    &trans
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9           &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans       &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        symbol_layer {
            bindings = <
&kp ESCAPE               &kp LS(NUMBER_1)        &kp LS(NUMBER_2)  &kp LS(NUMBER_3)         &kp LS(NUMBER_4)      &kp LS(N5)                                 &kp LS(NUMBER_6)  &kp LS(N7)            &kp LS(N8)             &kp LS(N9)        &kp LS(N0)                &kp DELETE
&mt LC(LS(Z)) LC(LS(Z))  &kp LS(LC(LEFT_ARROW))  &kp UP_ARROW      &kp LS(LC(RIGHT_ARROW))  &kp LS(LC(UP_ARROW))  &msc SCROLL_UP                             &trans            &kp LC(LS(UP_ARROW))  &kp LS(LEFT_BRACKET)   &kp LS(NUMBER_4)  &kp LS(NON_US_BACKSLASH)  &kp LS(MINUS)
&mt LC(Y) LC(Y)          &kp LEFT_ARROW          &kp DOWN          &kp RIGHT                &kp LC(LS(R))         &msc SCROLL_DOWN                           &trans            &kp LC(LS(DOWN))      &kp LS(RIGHT_BRACKET)  &kp LS(SQT)       &kp LS(SEMICOLON)         &kp LS(ENTER)
&mkp LCLK                &kp LC(Z)               &kp LC(X)         &kp LC(C)                &kp LC(V)             &kp LC(LS(Z))     &trans    &trans         &trans            &trans                &kp LS(COMMA)          &kp LS(PERIOD)    &kp SLASH                 &trans
                                                                   &mo 7                    &kp SPACE             &kp LC(Z)         &to 5     &kp LC(SLASH)  &kp END           &kp LSHFT             &kp LEFT_WIN
            >;
        };

        connection_layer {
            bindings = <
&kp GRAVE     &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                &kp F6        &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                          &trans        &trans  &trans  &trans  &trans   &kp F12
&trans        &trans        &trans        &trans        &trans        &trans                                &trans        &trans  &trans  &trans  &trans   &trans
&kp LEFT_WIN  &kp LEFT_WIN  &trans        &trans        &trans        &trans        &trans    &trans        &trans        &trans  &trans  &trans  &trans   &trans
                                          &kp LSHFT     &kp LSHFT     &kp SPACE     &to 0     &kp LEFT_ALT  &kp LEFT_WIN  &trans  &trans
            >;
        };

        game_layer {
            bindings = <
&kp M      &kp N1  &kp N2  &kp N3  &kp N4     &kp N5                                              &kp N6        &kp N7     &kp N8     &kp N9   &kp N0    &kp BACKSPACE
&kp TAB    &kp Q   &kp W   &kp E   &kp R      &kp T                                               &kp Y         &kp U      &kp I      &kp O    &kp P     &kp MINUS
&kp LCTRL  &kp A   &kp S   &kp D   &kp F      &kp G                                               &kp H         &kp J      &kp K      &kp L    &kp SEMI  &kp ENTER
&mkp LCLK  &kp Z   &kp X   &kp C   &kp V      &kp B         &kp ESCAPE    &kp LG(LC(LEFT_ARROW))  &kp N         &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                           &mo 10  &kp SPACE  &kp LEFT_ALT  &to 0         &kp LG(LS(Q))           &kp LEFT_WIN  &kp RSHFT  &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        game_layer_arrow {
            bindings = <
&kp M      &kp N1          &kp N2          &kp N3     &kp N4     &kp N5                                                     &kp N6        &kp N7     &kp N8     &kp N9   &kp N0    &kp ESC
&kp TAB    &kp Q           &kp UP_ARROW    &kp E      &kp R      &kp T                                                      &kp Y         &kp U      &kp I      &kp O    &kp P     &kp MINUS
&kp LCTRL  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp F      &kp G                                                      &kp H         &kp J      &kp K      &kp L    &kp SEMI  &kp ENTER
&mkp LCLK  &kp Z           &kp X           &kp C      &kp V      &kp B         &kp LG(LC(RIGHT))    &kp LG(LC(LEFT_ARROW))  &kp N         &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                                           &kp LSHFT  &kp SPACE  &kp LEFT_ALT  &to 0                &kp LG(LS(Q))           &kp LEFT_WIN  &kp RSHFT  &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        copy_paste_layer {
            bindings = <
&kp TILDE       &kp LC(C)       &kp LC(V)     &kp LC(A)       &kp LA(F4)       &trans                   &trans        &trans  &trans     &kp LG(LS(A))  &kp LG(LS(S))         &kp DEL
&kp LG(LS(Q))   &kp HOME        &kp UP_ARROW  &kp END         &trans           &trans                   &trans        &trans  &trans     &kp LC(LS(F))  &kp NON_US_BACKSLASH  &kp EQUAL
&kp LEFT_SHIFT  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT       &block_and_copy  &trans                   &trans        &trans  &trans     &kp SQT        &kp PLUS              &kp ENTER
&mkp LCLK       &trans          &trans        &kp LA(LS(F4))  &replace         &trans  &to 5    &trans  &trans        &trans  &kp GRAVE  &trans         &trans                &trans
                                              &sk LEFT_SHIFT  &kp SPACE        &mo 9   &to 0    &trans  &kp LEFT_ALT  &trans  &trans
            >;
        };

        mouse_layerr {
            bindings = <
&kp DELETE      &kp CAPS                 &kp LC(R)                &kp LC(LS(F))             &trans                      &kp NUMBER_6                    &kp N5  &trans  &trans  &trans  &trans  &trans
&kp LA(TAB)     &mkp RCLK                &faster_mouse MOVE_UP    &mkp RCLK                 &faster_scroll SCROLL_UP    &kp Y                           &kp T   &trans  &trans  &trans  &trans  &trans
&mkp LCLK       &faster_mouse MOVE_LEFT  &faster_mouse MOVE_DOWN  &faster_mouse MOVE_RIGHT  &kp LC(F)                   &kp H                           &kp G   &trans  &trans  &trans  &trans  &trans
&sk LEFT_SHIFT  &msc SCROLL_LEFT         &msc SCROLL_RIGHT        &mkp LCLK                 &faster_scroll SCROLL_DOWN  &kp N         &trans    &trans  &kp B   &trans  &trans  &trans  &trans  &trans
                                                                  &none                     &trans                      &trans        &to 5     &trans  &trans  &trans  &trans
            >;
        };

        layer_9 {
            bindings = <
&kp BACKSPACE  &kp N6  &kp N7  &kp N8     &kp N9     &kp N0                               &kp N6        &kp N7  &kp N8     &kp N9   &kp N0        &kp BACKSPACE
&kp TAB        &kp Q   &kp W   &kp E      &kp R      &kp T                                &kp Y         &kp U   &kp I      &kp O    &kp P         &kp MINUS
&kp LCTRL      &kp A   &kp S   &kp D      &kp F      &kp G                                &kp H         &kp J   &kp K      &kp L    &kp SEMI      &kp ENTER
&mkp LCLK      &kp Z   &kp X   &kp C      &kp V      &kp B      &kp CAPS    &mo 4         &kp N         &kp M   &kp COMMA  &kp DOT  &kp LS(FSLH)  &kp ENTER
                               &kp LSHFT  &kp SPACE  &kp SPACE  &to 7       &kp LEFT_ALT  &kp LEFT_WIN  &mo 3   &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        additional_game_layer {
            bindings = <
&kp ESCAPE     &kp LA(NUMBER_1)  &kp LA(NUMBER_2)  &kp LA(NUMBER_3)  &kp LA(NUMBER_4)  &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
&kp LG(LS(Q))  &kp LEFT_WIN      &kt W             &trans            &trans            &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
&kp T          &kt A             &kt S             &kt D             &spam_f           &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans         &trans            &kt X             &kt LEFT_SHIFT    &trans            &trans         &trans           &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                   &trans            &trans            &kp LA(ENTER)  &kp LG(LS(Q))    &trans  &trans  &trans  &trans
            >;
        };

        numpad {
            bindings = <
&kp F1  &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                       &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&kp F7  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp ASTERISK  &kp F10                      &trans  &trans  &trans  &trans   &trans   &trans
&kp F8  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS      &kp F11                      &trans  &trans  &trans  &trans   &trans   &trans
&kp F9  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS     &kp F12    &trans    &trans  &trans  &trans  &trans  &trans   &trans   &trans
                                    &kp NUMBER_0  &kp EQUAL     &kp SLASH  &to 0     &trans  &trans  &trans  &trans
            >;
        };
    };
};
